---
description: 
globs: 
alwaysApply: false
---
# Preferences and Settings Management Guide

Warden implements a comprehensive preferences system that manages user settings, API configurations, model visibility, and application behavior. This guide covers the preferences architecture and implementation patterns.

## Core Components

### Preferences View Structure
[PreferencesView.swift](mdc:Warden/UI/Preferences/PreferencesView.swift) implements a native macOS tab-based preferences interface:

```swift
struct PreferencesView: View {
    @StateObject private var store = ChatStore(persistenceController: PersistenceController.shared)
    @Environment(\.managedObjectContext) private var viewContext
    
    private enum PreferencesTabs: String, CaseIterable {
        case general = "General"
        case apiServices = "API Services"
        case aiPersonas = "AI Assistants"
        case keyboardShortcuts = "Keyboard Shortcuts"
        case backupRestore = "Backup & Restore"
        case supportDeveloper = "Support Developer"
        case credits = "Credits"
    }
}
```

### Inline Settings View
Warden also supports an inline settings view for integration within the main window:

```swift
struct InlineSettingsView: View {
    let onDismiss: () -> Void
    
    var body: some View {
        VStack(spacing: 0) {
            // Header with close button
            // Tab-based content with smaller sizing
            // Scrollable content area
        }
    }
}
```

## Tab-Based Organization

### General Settings
[TabGeneralSettingsView.swift](mdc:Warden/UI/Preferences/TabGeneralSettingsView.swift) manages core application preferences:

- **UI Appearance**: Font size, theme settings, sidebar customization
- **Chat Behavior**: Default models, temperature settings, context size
- **Sidebar Options**: AI provider logo visibility toggle
- **Multi-Agent Mode**: Feature enablement toggle
- **Advanced Features**: Experimental feature flags

```swift
@AppStorage("chatFontSize") private var chatFontSize: Double = 14.0
@AppStorage("showAIProviderLogos") private var showAIProviderLogos: Bool = true
@AppStorage("enableMultiAgentMode") private var enableMultiAgentMode: Bool = false
```

### API Services Configuration
[TabAPIServicesView.swift](mdc:Warden/UI/Preferences/TabAPIServicesView.swift) handles AI service management:

```swift
struct TabAPIServicesView: View {
    @State private var apiServices: [APIServiceEntity] = []
    @State private var selectedService: APIServiceEntity?
    @State private var showingModelSelection = false
    
    var body: some View {
        HSplitView {
            // Service list with configuration status
            // Service detail view with API key management
            // Model visibility controls
        }
    }
}
```

#### API Service Detail View
[APIServiceDetailView.swift](mdc:Warden/UI/Preferences/TabAPIServices/APIServiceDetailView.swift) provides detailed service configuration:

- **API Key Management**: Secure token storage and validation
- **Model Selection**: Available models and default model setting
- **Service Status**: Connection testing and health indicators
- **Custom Endpoints**: Support for self-hosted and custom API endpoints

### Model Visibility Management
[ModelSelectionView.swift](mdc:Warden/UI/Preferences/TabAPIServices/ModelSelectionView.swift) implements multi-select model visibility:

```swift
struct ModelSelectionView: View {
    let service: APIServiceEntity
    @Binding var isVisible: Bool
    @StateObject private var selectedModelsManager = SelectedModelsManager()
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            // Service header with icon
            // Multi-select model list with checkboxes
            // Select all / Deselect all controls
            // Save/Cancel actions
        }
    }
}
```

### AI Personas Management
[TabAIPersonasView.swift](mdc:Warden/UI/Preferences/TabAIPersonasView.swift) handles persona creation and management:

- **Persona Library**: Pre-defined and custom personas
- **System Instructions**: Custom prompts and behavior configuration
- **Model Preferences**: Per-persona model and temperature settings
- **Import/Export**: Persona sharing and backup functionality

### Keyboard Shortcuts
[TabHotkeysView.swift](mdc:Warden/UI/Preferences/TabHotkeysView.swift) manages application-wide keyboard shortcuts:

- **Global Shortcuts**: System-wide hotkeys for common actions
- **In-App Shortcuts**: Context-specific keyboard bindings
- **Customization**: User-defined key combinations
- **Conflict Detection**: Prevention of shortcut conflicts

### Backup & Restore
[TabBackupRestoreView.swift](mdc:Warden/UI/Preferences/TabBackupRestoreView.swift) provides data management:

- **Data Export**: Comprehensive backup of chats, projects, and settings
- **Import Functionality**: Restore from backup files
- **Selective Restore**: Choose specific data types to restore
- **Migration Tools**: Version compatibility and data migration

## Data Storage Patterns

### AppStorage Integration
User preferences are stored using SwiftUI's `@AppStorage` for automatic persistence:

```swift
// Core UI settings
@AppStorage("chatFontSize") private var chatFontSize: Double = 14.0
@AppStorage("selectedTheme") private var selectedTheme: ThemeMode = .system
@AppStorage("showAIProviderLogos") private var showAIProviderLogos: Bool = true

// Feature flags
@AppStorage("enableMultiAgentMode") private var enableMultiAgentMode: Bool = false
@AppStorage("enableAdvancedFeatures") private var enableAdvancedFeatures: Bool = false

// Model preferences
@AppStorage("defaultModel") private var defaultModel: String = AppConstants.chatGptDefaultModel
@AppStorage("defaultTemperature") private var defaultTemperature: Double = 0.7
```

### Secure Storage
Sensitive data like API keys are stored securely using the TokenManager:

```swift
// Store API key securely
try TokenManager.storeToken(apiKey, for: serviceId)

// Retrieve API key
let apiKey = try TokenManager.getToken(for: serviceId)

// Delete API key
try TokenManager.deleteToken(for: serviceId)
```

### Core Data Integration
Complex settings and preferences are stored in Core Data:

```swift
// API service configuration
let service = APIServiceEntity(context: viewContext)
service.name = "OpenAI"
service.type = "openai"
service.url = "https://api.openai.com/v1"
service.model = "gpt-4"

// Save changes
try viewContext.save()
```

## Model Management System

### Selected Models Manager
[SelectedModelsManager.swift](mdc:Warden/Utilities/SelectedModelsManager.swift) controls model visibility:

```swift
class SelectedModelsManager: ObservableObject {
    @Published var selectedModels: [String: Set<String>] = [:]
    
    func isModelSelected(_ model: String, for serviceType: String) -> Bool {
        return selectedModels[serviceType]?.contains(model) ?? true
    }
    
    func toggleModel(_ model: String, for serviceType: String) {
        if selectedModels[serviceType] == nil {
            selectedModels[serviceType] = Set()
        }
        
        if selectedModels[serviceType]!.contains(model) {
            selectedModels[serviceType]!.remove(model)
        } else {
            selectedModels[serviceType]!.insert(model)
        }
        
        saveSelectedModels()
    }
}
```

### Favorite Models Manager
[FavoriteModelsManager.swift](mdc:Warden/Utilities/FavoriteModelsManager.swift) manages user's preferred models:

```swift
class FavoriteModelsManager: ObservableObject {
    @Published var favoriteModels: Set<String> = []
    
    func toggleFavorite(_ modelId: String) {
        if favoriteModels.contains(modelId) {
            favoriteModels.remove(modelId)
        } else {
            favoriteModels.insert(modelId)
        }
        saveFavorites()
    }
    
    func isFavorite(_ modelId: String) -> Bool {
        return favoriteModels.contains(modelId)
    }
}
```

## API Key Management

### Token Manager Integration
Secure API key storage and retrieval:

```swift
class TokenManager {
    static func storeToken(_ token: String, for serviceId: String) throws {
        let keychainQuery: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrService as String: "WardenAI",
            kSecAttrAccount as String: serviceId,
            kSecValueData as String: token.data(using: .utf8)!
        ]
        
        // Delete existing item first
        SecItemDelete(keychainQuery)
        
        // Add new item
        let status = SecItemAdd(keychainQuery, nil)
        guard status == errSecSuccess else {
            throw TokenError.failedToStore
        }
    }
}
```

### API Key Validation
[ButtonTestApiTokenAndModel.swift](mdc:Warden/UI/Preferences/TabAPIServices/ButtonTestApiTokenAndModel.swift) provides API key testing:

```swift
struct ButtonTestApiTokenAndModel: View {
    let service: APIServiceEntity
    @State private var isLoading = false
    @State private var testResult: APITestResult?
    
    var body: some View {
        Button(action: testAPIConnection) {
            HStack {
                if isLoading {
                    ProgressView()
                        .scaleEffect(0.8)
                } else {
                    Image(systemName: testResult?.icon ?? "checkmark.circle")
                        .foregroundColor(testResult?.color ?? .secondary)
                }
                Text("Test Connection")
            }
        }
        .disabled(isLoading)
    }
    
    private func testAPIConnection() {
        // Implement API connection testing
    }
}
```

## Settings Window Management

### Window Management
[SettingsWindowManager.swift](mdc:Warden/Utilities/SettingsWindowManager.swift) handles preferences window lifecycle:

```swift
class SettingsWindowManager: ObservableObject {
    private var settingsWindow: NSWindow?
    
    func showPreferences() {
        if settingsWindow == nil {
            let contentView = PreferencesView()
            settingsWindow = NSWindow(
                contentRect: NSRect(x: 0, y: 0, width: 680, height: 720),
                styleMask: [.titled, .closable, .resizable],
                backing: .buffered,
                defer: false
            )
            settingsWindow?.contentView = NSHostingView(rootView: contentView)
            settingsWindow?.title = "Warden Preferences"
            settingsWindow?.center()
        }
        
        settingsWindow?.makeKeyAndOrderFront(nil)
        settingsWindow?.orderFrontRegardless()
    }
}
```

### Inline Settings Integration
Support for showing preferences within the main application window:

```swift
@State private var showingInlineSettings = false

.sheet(isPresented: $showingInlineSettings) {
    InlineSettingsView(onDismiss: {
        showingInlineSettings = false
    })
    .frame(width: 800, height: 900)
}
```

## UI Design Patterns

### Native macOS Tab Style
Implement native macOS-style tab bars with animations:

```swift
HStack(spacing: 4) {
    ForEach(PreferencesTabs.allCases, id: \.self) { tab in
        Button(action: {
            withAnimation(.easeInOut(duration: 0.25)) {
                selectedTab = tab
            }
        }) {
            VStack(spacing: 4) {
                Image(systemName: tab.icon)
                    .font(.system(size: 24, weight: selectedTab == tab ? .medium : .regular))
                    .foregroundColor(selectedTab == tab ? .accentColor : .secondary)
                
                Text(tab.rawValue)
                    .font(.system(size: 10, weight: .medium))
                    .foregroundColor(selectedTab == tab ? .primary : .secondary)
            }
            .frame(maxWidth: .infinity)
            .frame(height: 65)
            .background(
                RoundedRectangle(cornerRadius: 8)
                    .fill(selectedTab == tab ? Color(NSColor.selectedControlColor) : Color.clear)
                    .scaleEffect(selectedTab == tab ? 1.0 : 0.95)
                    .animation(.easeInOut(duration: 0.25), value: selectedTab == tab)
            )
        }
        .buttonStyle(PlainButtonStyle())
        .scaleEffect(selectedTab == tab ? 1.02 : 1.0)
        .animation(.easeInOut(duration: 0.25), value: selectedTab == tab)
    }
}
```

### Responsive Layout
Support both window and inline presentation modes:

```swift
Group {
    switch selectedTab {
    case .general:
        TabGeneralSettingsView()
    case .apiServices:
        TabAPIServicesView()
    // ... other tabs
    }
}
.frame(maxWidth: .infinity, maxHeight: .infinity)
.background(Color(NSColor.windowBackgroundColor))
```

## Preference Validation

### Input Validation
Validate user inputs for critical settings:

```swift
private func validateAPIKey(_ key: String) -> Bool {
    return !key.isEmpty && key.count > 10 && key.hasPrefix("sk-")
}

private func validateTemperature(_ temperature: Double) -> Bool {
    return temperature >= 0.0 && temperature <= 2.0
}

private func validateContextSize(_ size: Int) -> Bool {
    return size > 0 && size <= 32000
}
```

### Error Handling
Provide clear feedback for invalid settings:

```swift
@State private var validationErrors: [String] = []

private func saveSettings() {
    validationErrors.removeAll()
    
    if !validateAPIKey(apiKey) {
        validationErrors.append("Invalid API key format")
    }
    
    if !validationErrors.isEmpty {
        showValidationAlert = true
        return
    }
    
    // Save valid settings
}
```

## Migration and Compatibility

### Settings Migration
Handle settings migration between app versions:

```swift
private func migrateSettingsIfNeeded() {
    let currentVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "1.0"
    let lastMigratedVersion = UserDefaults.standard.string(forKey: "lastMigratedSettingsVersion") ?? "0.0"
    
    if shouldMigrateSettings(from: lastMigratedVersion, to: currentVersion) {
        performSettingsMigration(from: lastMigratedVersion)
        UserDefaults.standard.set(currentVersion, forKey: "lastMigratedSettingsVersion")
    }
}
```

### Backwards Compatibility
Maintain compatibility with older preference formats:

```swift
private func loadLegacySettings() {
    // Handle old preference keys and formats
    if let legacyFontSize = UserDefaults.standard.object(forKey: "oldFontSizeKey") as? Double {
        UserDefaults.standard.set(legacyFontSize, forKey: "chatFontSize")
        UserDefaults.standard.removeObject(forKey: "oldFontSizeKey")
    }
}
```

## Best Practices

### State Management
- Use `@AppStorage` for simple preferences
- Use `@StateObject` for complex preference managers
- Implement proper validation before saving
- Provide immediate visual feedback for changes

### Security
- Store sensitive data (API keys) in Keychain
- Validate all user inputs
- Implement secure defaults for critical settings
- Clear sensitive data from memory promptly

### User Experience
- Provide clear descriptions for all settings
- Group related settings logically
- Implement search functionality for large preference sets
- Show real-time previews where applicable

### Performance
- Load preferences lazily where possible
- Implement efficient change detection
- Use background queues for expensive operations
- Cache frequently accessed preferences

### Accessibility
- Provide proper accessibility labels
- Support keyboard navigation
- Implement VoiceOver support
- Use appropriate contrast ratios

### Testing
- Test settings persistence across app launches
- Verify migration between versions
- Test with invalid inputs and edge cases
- Validate security measures for sensitive data
