---
description: 
globs: 
alwaysApply: false
---
# Testing and Debugging Guide

This guide covers testing strategies, debugging techniques, and quality assurance practices for Warden development.

## Testing Architecture

### Unit Testing Framework
Located in [WardenTests](mdc:WardenTests):
- **XCTest Framework**: Standard iOS/macOS testing framework
- **Test Target**: Separate target for unit tests with proper dependencies
- **Mock Objects**: Test doubles for external API dependencies
- **Async Testing**: Full support for async/await and streaming patterns
- **Core Data Testing**: In-memory store testing for persistence layer

### Core Test Files
- **Main Test Suite**: [macaiTests.swift](mdc:WardenTests/macaiTests.swift) - Primary test entry point and app lifecycle tests
- **Message Parser Tests**: [MessageParserTests.swift](mdc:WardenTests/Utilities/MessageParserTests.swift) - Text processing and content validation
- **Utility Tests**: Comprehensive coverage for [Extensions.swift](mdc:Warden/Utilities/Extensions.swift) and utility classes
- **API Handler Tests**: Mock testing for all AI service integrations
- **Core Data Tests**: Entity relationship and persistence validation

### UI Testing Framework
Located in [WardenUITests](mdc:WardenUITests):
- **UI Test Suite**: [WardenUITests.swift](mdc:WardenUITests/WardenUITests.swift) - Complete user interface automation
- **Launch Tests**: [WardenUITestsLaunchTests.swift](mdc:WardenUITests/WardenUITestsLaunchTests.swift) - App startup and initialization validation
- **Accessibility Testing**: VoiceOver navigation and accessibility compliance
- **Cross-Platform Testing**: Intel and Apple Silicon compatibility
- **Project Workflow Tests**: Complete project management user flows

## Preview Support

### SwiftUI Previews
Development and testing support via [PreviewStateManager.swift](mdc:Warden/UI/PreviewStateManager.swift):
- **Realistic Mock Data**: Comprehensive test data including projects, chats, messages, and personas
- **Multi-State Previews**: Different app states (empty, populated, loading, error)
- **API Response Mocking**: Simulated streaming responses for UI development
- **File Attachment Testing**: Mock file attachments for various formats
- **Project Hierarchy Testing**: Complex project/chat relationships for UI validation
- **Reasoning Model Testing**: Mock thinking process content for reasoning model UI

### Preview Data Patterns
```swift
// Example from PreviewStateManager
static func createMockChat(withProject project: Project? = nil) -> Chat {
    let chat = Chat(context: shared.persistentContainer.viewContext)
    chat.id = UUID()
    chat.title = "Mock Chat \(Int.random(in: 1...100))"
    chat.project = project
    chat.timestamp = Date()
    return chat
}
```

## Testing Patterns

### Unit Test Structure
```swift
class MessageParserTests: XCTestCase {
    var parser: MessageParser!
    var mockContext: NSManagedObjectContext!
    
    override func setUp() {
        super.setUp()
        parser = MessageParser()
        
        // In-memory Core Data stack for testing
        let container = NSPersistentContainer(name: "warenDataModel")
        let description = NSPersistentStoreDescription()
        description.type = NSInMemoryStoreType
        container.persistentStoreDescriptions = [description]
        
        container.loadPersistentStores { _, _ in }
        mockContext = container.viewContext
    }
    
    override func tearDown() {
        parser = nil
        mockContext = nil
        super.tearDown()
    }
    
    func testMarkdownParsing() throws {
        let markdown = "# Header\n\n**Bold text** with `code`"
        let result = parser.parseMarkdown(markdown)
        
        XCTAssertTrue(result.contains("Header"))
        XCTAssertTrue(result.contains("Bold text"))
    }
}
```

### Mock API Dependencies
Create test doubles for AI service integrations:
```swift
class MockChatGPTHandler: APIProtocol {
    var mockResponse: String = "Mock AI response"
    var shouldFail: Bool = false
    var isReasoningModel: Bool = false
    var mockReasoningContent: String = "Mock thinking process"
    
    func sendMessage(
        chatId: UUID,
        messageContent: String,
        conversation: [Message],
        modelName: String,
        systemPrompt: String?
    ) async throws -> AsyncThrowingStream<String, Error> {
        
        return AsyncThrowingStream { continuation in
            if shouldFail {
                continuation.finish(throwing: APIError.networkError)
                return
            }
            
            // Simulate reasoning model response
            if isReasoningModel {
                continuation.yield("<think>\(mockReasoningContent)</think>")
            }
            
            // Simulate streaming response
            for chunk in mockResponse.chunked(into: 5) {
                continuation.yield(String(chunk))
                try? await Task.sleep(nanoseconds: 10_000_000) // 10ms delay
            }
            
            continuation.finish()
        }
    }
}
```

### Async and Streaming Tests
Testing concurrent operations and real-time streaming:
```swift
func testStreamingResponse() async throws {
    let mockHandler = MockChatGPTHandler()
    mockHandler.mockResponse = "This is a test streaming response"
    
    let expectation = XCTestExpectation(description: "Streaming completed")
    var receivedChunks: [String] = []
    
    let stream = try await mockHandler.sendMessage(
        chatId: UUID(),
        messageContent: "Test",
        conversation: [],
        modelName: "gpt-4",
        systemPrompt: nil
    )
    
    for try await chunk in stream {
        receivedChunks.append(chunk)
    }
    
    let fullResponse = receivedChunks.joined()
    XCTAssertEqual(fullResponse, mockHandler.mockResponse)
    expectation.fulfill()
    
    await fulfillment(of: [expectation], timeout: 5.0)
}

func testReasoningModelResponse() async throws {
    let mockHandler = MockChatGPTHandler()
    mockHandler.isReasoningModel = true
    mockHandler.mockResponse = "Final answer"
    mockHandler.mockReasoningContent = "Let me think about this..."
    
    var receivedContent = ""
    let stream = try await mockHandler.sendMessage(
        chatId: UUID(),
        messageContent: "Reasoning test",
        conversation: [],
        modelName: "o1-preview",
        systemPrompt: nil
    )
    
    for try await chunk in stream {
        receivedContent += chunk
    }
    
    XCTAssertTrue(receivedContent.contains("<think>"))
    XCTAssertTrue(receivedContent.contains("Let me think about this..."))
    XCTAssertTrue(receivedContent.contains("Final answer"))
}
```

### Core Data Testing
Testing persistence layer with in-memory stores:
```swift
func testProjectChatRelationship() throws {
    let project = Project(context: mockContext)
    project.id = UUID()
    project.name = "Test Project"
    
    let chat = Chat(context: mockContext)
    chat.id = UUID()
    chat.title = "Test Chat"
    chat.project = project
    
    try mockContext.save()
    
    // Test relationship
    XCTAssertEqual(project.chats?.count, 1)
    XCTAssertEqual(chat.project, project)
    
    // Test cascade delete
    mockContext.delete(project)
    try mockContext.save()
    
    // Chat should still exist but with nil project (backwards compatibility)
    XCTAssertNil(chat.project)
}
```

## Debugging Strategies

### Structured Logging
Strategic logging with os_log for production debugging:
```swift
import os.log

extension Logger {
    private static var subsystem = Bundle.main.bundleIdentifier!
    
    static let api = Logger(subsystem: subsystem, category: "api")
    static let coreData = Logger(subsystem: subsystem, category: "coredata")
    static let ui = Logger(subsystem: subsystem, category: "ui")
}

// Usage throughout the app
Logger.api.info("Sending message to \(serviceName) with model \(modelName)")
Logger.coreData.error("Failed to save context: \(error.localizedDescription)")
Logger.ui.debug("Chat view appeared for chat: \(chat.id)")
```

### Development-Only Debug Output
```swift
#if DEBUG
func debugPrint(_ items: Any...) {
    print("[DEBUG]", items.map { "\($0)" }.joined(separator: " "))
}

func debugChatState(_ chat: Chat) {
    debugPrint("Chat:", chat.title, "Messages:", chat.messages?.count ?? 0, "Project:", chat.project?.name ?? "None")
}
#else
func debugPrint(_ items: Any...) { /* No-op in release */ }
func debugChatState(_ chat: Chat) { /* No-op in release */ }
#endif
```

### Xcode Debugging Features
- **Conditional Breakpoints**: Break only when specific conditions are met
- **Exception Breakpoints**: Catch all Objective-C and Swift exceptions
- **Symbolic Breakpoints**: Break on specific method calls across all classes
- **LLDB Commands**: Advanced debugging with custom commands and scripts
- **View Debugging**: 3D view hierarchy inspection for SwiftUI and AppKit
- **Memory Graph Debugger**: Visual memory relationship analysis

### Core Data Debugging
Enable Core Data debugging flags:
```swift
// In WardenApp.swift or during container setup
container.persistentStoreDescriptions.first?.setOption(true as NSNumber, 
                                                      forKey: NSPersistentHistoryTrackingKey)

// Enable SQL debugging
if ProcessInfo.processInfo.arguments.contains("-com.apple.CoreData.SQLDebug") {
    // SQL statements will be logged to console
}
```

## Performance Testing and Profiling

### XCTest Performance Metrics
```swift
func testChatLoadingPerformance() {
    let chatStore = ChatStore()
    
    measure(metrics: [XCTClockMetric(), XCTMemoryMetric()]) {
        chatStore.loadChats()
    }
}

func testLargeProjectPerformance() {
    // Create large dataset
    let project = createProjectWithManyChats(chatCount: 1000)
    
    measureMetrics([.wallClockTime, .cpuInstructions]) {
        let _ = chatStore.loadProjectChats(project)
    }
}

func testAPIResponseParsing() {
    let largeResponse = generateLargeAPIResponse(size: 10_000)
    
    measure {
        let _ = MessageParser().parseMarkdown(largeResponse)
    }
}
```

### Instruments Profiling
Detailed performance analysis:
- **Time Profiler**: Identify CPU bottlenecks in AI response processing
- **Allocations**: Track memory usage during file uploads and large conversations
- **Core Data**: Monitor fetch request performance and faulting behavior
- **Network**: Analyze API call patterns and streaming performance
- **SwiftUI**: Profile view update performance and state changes

### Memory Leak Detection
```swift
func testChatMemoryLeaks() {
    weak var weakChat: Chat?
    
    autoreleasepool {
        let chat = chatStore.createChat(title: "Memory Test")
        weakChat = chat
        
        // Use the chat
        chatStore.addMessage(to: chat, content: "Test message", role: "user")
        
        // Delete the chat
        chatStore.deleteChat(chat)
    }
    
    // Chat should be deallocated
    XCTAssertNil(weakChat, "Chat should be deallocated after deletion")
}
```

## Mock Data and Test Fixtures

### Comprehensive Test Data
Realistic test data covering all app features:
```swift
extension PreviewStateManager {
    static func createCompleteTestSuite() -> (projects: [Project], chats: [Chat], personas: [Persona]) {
        let projects = [
            createProject(name: "SwiftUI Development", chatCount: 5),
            createProject(name: "AI Integration", chatCount: 3),
            createProject(name: "Core Data Migration", chatCount: 8)
        ]
        
        let ungroupedChats = [
            createChatWithMessages(title: "Quick Question", messageCount: 2),
            createChatWithMessages(title: "Code Review", messageCount: 15),
            createChatWithReasoningContent(title: "Complex Problem Solving")
        ]
        
        let personas = [
            createPersona(name: "Code Reviewer", systemPrompt: "You are an expert code reviewer..."),
            createPersona(name: "Technical Writer", systemPrompt: "You help write clear documentation..."),
            createPersona(name: "System Architect", systemPrompt: "You design scalable systems...")
        ]
        
        return (projects, ungroupedChats, personas)
    }
}
```

### File Attachment Testing
Mock file attachments for various formats:
```swift
static func createMockFileAttachments() -> [FileEntity] {
    return [
        createFileAttachment(filename: "requirements.txt", mimeType: "text/plain", content: "pandas\nnumpy\nrequests"),
        createFileAttachment(filename: "data.json", mimeType: "application/json", content: """
            {"users": [{"id": 1, "name": "John"}, {"id": 2, "name": "Jane"}]}
            """),
        createFileAttachment(filename: "report.pdf", mimeType: "application/pdf", content: Data()), // Binary data
        createFileAttachment(filename: "image.png", mimeType: "image/png", content: createMockImageData())
    ]
}
```

### Edge Case Testing Data
Boundary conditions and error scenarios:
```swift
static func createEdgeCaseData() -> EdgeCaseTestData {
    return EdgeCaseTestData(
        emptyProject: createProject(name: "Empty Project", chatCount: 0),
        chatWithNoMessages: createChat(title: "Empty Chat", messageCount: 0),
        chatWithManyMessages: createChat(title: "Large Chat", messageCount: 500),
        malformedAPIResponse: "{'invalid': json syntax}",
        oversizedFile: createLargeFile(sizeMB: 100),
        unicodeContent: "Test with emoji 🚀 and special chars: ñ, é, 中文",
        longChatTitle: String(repeating: "Very Long Title ", count: 50)
    )
}
```

## Quality Assurance

### Code Quality Metrics
- **Test Coverage**: Maintain >85% code coverage across core components
- **Cyclomatic Complexity**: Keep methods under 10 complexity points
- **Code Review**: Mandatory peer review for all changes
- **Static Analysis**: SwiftLint integration for code style consistency
- **Dependency Analysis**: Monitor third-party library usage and security

### Automated Testing Pipeline
```swift
// Example CI/CD test script
func runAutomatedTestSuite() {
    // Unit tests
    XCTAssertTrue(runUnitTests())
    
    // Integration tests
    XCTAssertTrue(runIntegrationTests())
    
    // Performance benchmarks
    XCTAssertTrue(runPerformanceTests())
    
    // Accessibility validation
    XCTAssertTrue(runAccessibilityTests())
    
    // Memory leak detection
    XCTAssertTrue(runMemoryLeakTests())
}
```

### Integration Testing Workflows
End-to-end validation of key user journeys:
- **New User Onboarding**: Complete welcome screen to first chat flow
- **Project Management**: Create project → add chats → reorganize → delete workflow
- **Multi-Agent Testing**: Concurrent API calls with different services
- **File Upload Pipeline**: Complete file attachment lifecycle with various formats
- **Reasoning Model Integration**: Full thinking process display and interaction
- **Export Functionality**: Complete chat sharing and export workflows

### Regression Testing Strategy
Prevent feature breakage with comprehensive test coverage:
- **Critical Path Protection**: Core chat functionality always tested
- **API Compatibility**: Ensure all AI service integrations remain functional
- **Data Migration Testing**: Validate Core Data schema changes
- **UI Consistency**: Verify design system compliance across all components
- **Performance Regression**: Monitor for performance degradation
- **Accessibility Compliance**: Maintain VoiceOver and accessibility standards

### Release Testing Checklist
Pre-release validation protocol:
- [ ] All unit tests passing
- [ ] Integration tests successful
- [ ] Performance benchmarks within acceptable ranges
- [ ] Memory leak detection clean
- [ ] Accessibility audit complete
- [ ] Multi-language support validated
- [ ] Cross-platform compatibility (Intel/Apple Silicon)
- [ ] API key validation for all services
- [ ] Data backup/restore functionality
- [ ] Update mechanism testing
- [ ] Privacy and security audit
- [ ] User documentation accuracy
