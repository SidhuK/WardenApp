---
description: 
globs: 
alwaysApply: false
---
# Accessibility and Localization Guide

This guide covers accessibility support, VoiceOver integration, keyboard navigation, and localization patterns implemented in Warden.

## Accessibility Architecture

### VoiceOver Support
Comprehensive screen reader integration throughout the app:
- **Semantic Labels**: Descriptive accessibility labels for all interactive elements
- **Accessibility Hints**: Context-specific hints for complex interactions
- **Reading Order**: Logical navigation flow for screen readers
- **Dynamic Content**: Proper announcements for live updates and streaming content

### Keyboard Navigation
Full keyboard accessibility without mouse dependency:
- **Focus Management**: Proper focus ring visibility and logical tab order
- **Keyboard Shortcuts**: Defined in [WardenApp.swift](mdc:Warden/WardenApp.swift) for common actions
- **Modal Navigation**: Escape key handling for modal dismissal
- **Table Navigation**: Arrow key support for chat list and message navigation

### Dynamic Type Support
Adaptive text sizing for accessibility:
- **Font Scaling**: Automatic scaling with system Dynamic Type settings
- **Layout Adaptation**: UI components adjust to larger text sizes
- **Minimum Sizes**: Maintain usability at extreme text sizes
- **Contrast Enhancement**: High contrast mode support

## Accessibility Implementation Patterns

### SwiftUI Accessibility Modifiers
Proper accessibility annotation throughout the UI:

```swift
// Chat list row accessibility
Button(action: selectChat) {
    ChatRowContent()
}
.accessibilityLabel(chat.title)
.accessibilityHint("Double-tap to open this conversation")
.accessibilityAddTraits(.isButton)
.accessibilityElement(children: .combine)

// Message content accessibility
Text(message.content)
    .accessibilityLabel(constructAccessibilityLabel(for: message))
    .accessibilityAddTraits(message.role == "assistant" ? .isStaticText : .none)
    .accessibilityCustomContent("Timestamp", message.formattedTimestamp)
    .accessibilityCustomContent("Sender", message.role.capitalized)
```

### Complex Component Accessibility
Multi-element components with proper grouping:

```swift
// Project folder with accessibility grouping
VStack {
    ProjectHeader(project: project)
    ProjectChatList(chats: project.chats)
}
.accessibilityElement(children: .contain)
.accessibilityLabel("Project: \(project.name)")
.accessibilityHint("Contains \(project.chats.count) conversations. Expand to view chats.")
.accessibilityAddTraits(.isButton)
.accessibilityAction(.activate) {
    toggleProjectExpansion()
}
```

### Dynamic Content Accessibility
Live updates and streaming content:

```swift
// AI response streaming accessibility
@State private var accessibilityAnnouncement = ""

// Update accessibility when streaming content changes
.onChange(of: streamingResponse) { newValue in
    // Announce significant content updates
    if shouldAnnounceUpdate(newValue) {
        accessibilityAnnouncement = "AI response updated: \(summarizeContent(newValue))"
    }
}
.accessibilityAnnouncesValue(accessibilityAnnouncement)
```

## Keyboard Navigation Implementation

### Focus Management
Proper focus handling for keyboard users:

```swift
// Focus state management in chat view
@FocusState private var focusedField: ChatField?

enum ChatField: Hashable {
    case messageInput
    case modelSelector
    case sendButton
}

// Keyboard shortcut handling
.onReceive(NotificationCenter.default.publisher(for: .focusMessageInput)) { _ in
    focusedField = .messageInput
}
.focused($focusedField, equals: .messageInput)
```

### Custom Keyboard Shortcuts
App-wide keyboard shortcuts defined in [WardenApp.swift](mdc:Warden/WardenApp.swift):

```swift
.commands {
    CommandGroup(after: .newItem) {
        Button("New Chat") {
            chatStore.createNewChat()
        }
        .keyboardShortcut("n", modifiers: .command)
        
        Button("Focus Message Input") {
            NotificationCenter.default.post(name: .focusMessageInput, object: nil)
        }
        .keyboardShortcut("/", modifiers: .command)
        
        Button("Toggle Sidebar") {
            toggleSidebar()
        }
        .keyboardShortcut("s", modifiers: [.command, .option])
    }
    
    CommandGroup(after: .textEditing) {
        Button("Send Message") {
            sendCurrentMessage()
        }
        .keyboardShortcut(.return, modifiers: .command)
    }
}
```

### Modal and Sheet Navigation
Keyboard-friendly modal handling:

```swift
// Preferences sheet with keyboard navigation
.sheet(isPresented: $showingPreferences) {
    PreferencesView()
        .onReceive(NotificationCenter.default.publisher(for: .escapeKeyPressed)) { _ in
            showingPreferences = false
        }
        .accessibilityLabel("Application Preferences")
        .accessibilityHint("Press escape to close")
}
```

## Accessibility Testing Patterns

### VoiceOver Testing Integration
Automated accessibility testing:

```swift
// UI test for VoiceOver navigation
func testVoiceOverChatNavigation() throws {
    let app = XCUIApplication()
    app.launch()
    
    // Enable accessibility inspector
    app.accessibilityElementMatchingType(.any, identifier: "chat-list")
    
    // Test chat selection with VoiceOver
    let firstChat = app.accessibilityElements.firstMatch
    XCTAssertTrue(firstChat.exists)
    XCTAssertFalse(firstChat.label.isEmpty)
    
    firstChat.tap()
    
    // Verify chat opened and focus moved appropriately
    let chatView = app.accessibilityElements.matching(identifier: "chat-view").firstMatch
    XCTAssertTrue(chatView.exists)
}
```

### Keyboard Navigation Testing
Comprehensive keyboard interaction validation:

```swift
func testKeyboardOnlyNavigation() throws {
    let app = XCUIApplication()
    app.launch()
    
    // Test tab navigation through main interface
    app.typeKey(.tab, modifiers: [])
    let focusedElement = app.elementWithFocus
    XCTAssertNotNil(focusedElement)
    
    // Test keyboard shortcuts
    app.typeKey("n", modifiers: .command)
    
    // Verify new chat creation
    let newChatInput = app.textFields["message-input"]
    XCTAssertTrue(newChatInput.hasFocus)
}
```

## Accessibility Best Practices

### Label Construction
Creating meaningful accessibility labels:

```swift
func constructAccessibilityLabel(for message: Message) -> String {
    let senderInfo = message.role == "assistant" ? "AI response" : "Your message"
    let timeInfo = message.timestamp.accessibleTimeDescription
    let attachmentInfo = message.attachments?.isEmpty == false ? "with attachments" : ""
    
    return "\(senderInfo) \(attachmentInfo) at \(timeInfo): \(message.content.truncated(to: 100))"
}

extension Date {
    var accessibleTimeDescription: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .none
        formatter.timeStyle = .short
        return formatter.string(from: self)
    }
}
```

### Trait Assignment
Proper accessibility traits for different UI elements:

```swift
// Button-like elements
.accessibilityAddTraits(.isButton)

// Informational content
.accessibilityAddTraits(.isStaticText)

// Interactive lists
.accessibilityAddTraits(.allowsDirectInteraction)

// Important updates
.accessibilityAddTraits(.updatesFrequently)

// Selected states
.accessibilityAddTraits(isSelected ? .isSelected : [])
```

### Accessibility Actions
Custom actions for complex interactions:

```swift
// Chat row with multiple actions
ChatListRow(chat: chat)
    .accessibilityActions {
        Button("Rename Chat") {
            startRenaming(chat)
        }
        
        Button("Delete Chat") {
            deleteChat(chat)
        }
        
        Button("Move to Project") {
            showMoveToProject(chat)
        }
    }
```

## Localization Architecture

### String Management
Centralized localization using NSLocalizedString:

```swift
// Localized strings with context
extension String {
    static let newChatTitle = NSLocalizedString(
        "New Chat",
        comment: "Default title for newly created chat conversations"
    )
    
    static let deleteConfirmation = NSLocalizedString(
        "Are you sure you want to delete this chat?",
        comment: "Confirmation dialog for chat deletion"
    )
    
    static func chatCount(_ count: Int) -> String {
        String.localizedStringWithFormat(
            NSLocalizedString("%d chats", comment: "Number of chats in a project"),
            count
        )
    }
}
```

### Date and Number Formatting
Locale-aware formatting:

```swift
extension Date {
    var localizedDescription: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        formatter.locale = Locale.current
        return formatter.string(from: self)
    }
}

extension Double {
    var localizedTemperatureDescription: String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.minimumFractionDigits = 1
        formatter.maximumFractionDigits = 1
        formatter.locale = Locale.current
        return formatter.string(from: NSNumber(value: self)) ?? "\(self)"
    }
}
```

### RTL Language Support
Right-to-left language layout support:

```swift
// Layout that adapts to text direction
HStack {
    if UIApplication.shared.userInterfaceLayoutDirection == .rightToLeft {
        // RTL layout
        Spacer()
        ChatBubble(message: message, alignment: .trailing)
    } else {
        // LTR layout
        ChatBubble(message: message, alignment: .leading)
        Spacer()
    }
}
.environment(\.layoutDirection, .leadingToTrailing)
```

## Platform-Specific Accessibility

### macOS Accessibility Features
Integration with macOS accessibility services:

```swift
// Respect system accessibility preferences
@Environment(\.accessibilityReduceMotion) private var reduceMotion
@Environment(\.accessibilityDifferentiateWithoutColor) private var differentiateWithoutColor
@Environment(\.accessibilityReduceTransparency) private var reduceTransparency

// Adaptive animations based on preferences
.animation(reduceMotion ? .none : .easeInOut(duration: 0.25))

// Color differentiation for accessibility
.foregroundColor(
    differentiateWithoutColor 
        ? .primary 
        : (isSelected ? .accentColor : .secondary)
)
```

### VoiceOver Integration
Advanced VoiceOver features:

```swift
// Custom rotor for VoiceOver navigation
.accessibilityRotor("Messages") {
    ForEach(messages, id: \.id) { message in
        AccessibilityRotorEntry(message.content) {
            scrollToMessage(message)
        }
    }
}

// VoiceOver reading order customization
.accessibilityCustomOrder([
    messageContent,
    timestamp,
    senderInfo,
    attachmentInfo
])
```

## Testing and Validation

### Accessibility Audit Checklist
Comprehensive accessibility validation:

- [ ] All interactive elements have accessibility labels
- [ ] Complex UI components have appropriate accessibility hints
- [ ] Keyboard navigation covers all functionality
- [ ] Focus management works correctly in modal views
- [ ] VoiceOver can navigate the entire interface
- [ ] Dynamic content updates are announced properly
- [ ] Color contrast meets WCAG guidelines
- [ ] Text scales appropriately with Dynamic Type
- [ ] RTL languages display correctly
- [ ] Reduced motion preferences are respected

### Automated Accessibility Testing
Integration with accessibility testing tools:

```swift
func testAccessibilityCompliance() throws {
    let app = XCUIApplication()
    app.launch()
    
    // Run automated accessibility audit
    let auditResult = app.performAccessibilityAudit()
    XCTAssertTrue(auditResult.passed, "Accessibility audit failed: \(auditResult.issues)")
    
    // Test specific accessibility requirements
    validateAllElementsHaveLabels()
    validateKeyboardNavigation()
    validateVoiceOverSupport()
}

private func validateAllElementsHaveLabels() {
    let interactiveElements = app.buttons.allElementsBoundByIndex + 
                             app.textFields.allElementsBoundByIndex +
                             app.links.allElementsBoundByIndex
    
    for element in interactiveElements {
        XCTAssertFalse(element.label.isEmpty, "Interactive element missing accessibility label")
    }
}
```

## Accessibility Performance Considerations

### Efficient Label Construction
Optimize accessibility label generation:

```swift
// Cache accessibility labels for performance
private var accessibilityLabelCache: [UUID: String] = [:]

func cachedAccessibilityLabel(for message: Message) -> String {
    if let cached = accessibilityLabelCache[message.id] {
        return cached
    }
    
    let label = constructAccessibilityLabel(for: message)
    accessibilityLabelCache[message.id] = label
    return label
}

// Clear cache when messages change
.onReceive(messagesDidChange) { _ in
    accessibilityLabelCache.removeAll()
}
```

### Lazy Accessibility Loading
Load accessibility content on demand:

```swift
// Lazy accessibility content for large lists
LazyVStack {
    ForEach(messages) { message in
        MessageView(message: message)
            .accessibilityElement(children: .combine)
            .accessibilityLabel(
                accessibilityEnabled ? 
                    constructAccessibilityLabel(for: message) : 
                    message.content
            )
    }
}
.onReceive(NotificationCenter.default.publisher(for: UIAccessibility.voiceOverStatusDidChangeNotification)) { _ in
    accessibilityEnabled = UIAccessibility.isVoiceOverRunning
}
```

## Future Accessibility Enhancements

### Planned Improvements
- **Voice Control**: Enhanced voice control support for hands-free operation
- **Switch Control**: Support for external switch devices
- **Enhanced Contrast**: Additional high contrast themes
- **Cognitive Accessibility**: Simplified navigation modes
- **Multi-language VoiceOver**: Support for multiple languages in single conversations
- **Accessibility Analytics**: Usage analytics for accessibility features

### Accessibility API Integration
Integration with Apple's latest accessibility APIs:
- **Accessibility Inspector**: Enhanced debugging support
- **Accessibility Shortcuts**: Custom accessibility shortcut actions
- **Screen Reader API**: Advanced screen reader integration
- **Assistive Touch**: Support for assistive touch gestures
