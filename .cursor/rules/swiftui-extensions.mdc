---
description: 
globs: 
alwaysApply: false
---
# SwiftUI Extensions and Utilities

This guide covers the custom SwiftUI extensions, modifiers, and utility patterns used throughout Warden to enhance UI development.

## Core Extensions

### View Extensions
Located in [Extensions.swift](mdc:Warden/Utilities/Extensions.swift):

#### Custom Border Modifier
```swift
extension View {
    func border(width: CGFloat, edges: [Edge], color: Color) -> some View {
        overlay(EdgeBorder(width: width, edges: edges).foregroundColor(color))
    }
}
```

Allows selective edge borders on views:
```swift
Text("Content")
    .border(width: 1, edges: [.top, .bottom], color: .gray)
```

#### View Erasure Helper
```swift
extension View {
    func eraseToAnyView() -> AnyView {
        AnyView(self)
    }
}
```

Simplifies type erasure for dynamic view composition in [HighlightedText.swift](mdc:Warden/UI/Components/HighlightedText.swift).

### Binding Extensions

#### Equality Binding
```swift
extension Binding {
    func equalTo<A: Equatable>(_ value: A) -> Binding<Bool> where Value == A? {
        Binding<Bool> {
            wrappedValue == value
        } set: {
            if $0 {
                wrappedValue = value
            }
            else if wrappedValue == value {
                wrappedValue = nil
            }
        }
    }
}
```

Used for radio button-style selections and optional value toggling.

### Color Extensions

#### Hex Color Support
```swift
extension Color {
    init?(hex: String) -> Color?
    func toHex() -> String
    func withAlphaComponent(_ alpha: CGFloat) -> NSColor
}
```

Enables hex color initialization and conversion:
```swift
let customColor = Color(hex: "#FF5733")
let hexString = Color.blue.toHex()
```

## Custom ViewModifiers

### Swipe Gesture Modifier
Implemented in [SwipeModifier.swift](mdc:Warden/Utilities/SwipeModifier.swift):

```swift
extension View {
    func onSwipe(perform action: @escaping (SwipeEvent) -> Void) -> some View {
        modifier(OnSwipe(action: action))
    }
}
```

Provides native macOS swipe gesture detection:
```swift
chatRow
    .onSwipe { event in
        switch event.direction {
        case .west: deleteChat()
        case .east: moveToProject()
        default: break
        }
    }
```

#### SwipeEvent Structure
```swift
struct SwipeEvent {
    let direction: Compass  // .north, .south, .east, .west, etc.
    let modifier: Modifier  // .shift, .control, .option, .command
    let compass: Compass    // Combined directional information
}
```

### Edge Border Shape
Custom shape for selective borders:
```swift
struct EdgeBorder: Shape {
    var width: CGFloat
    var edges: [Edge]
    
    func path(in rect: CGRect) -> Path {
        // Implementation for drawing borders on specific edges
    }
}
```

## Text and Content Extensions

### Highlighted Text Component
Defined in [HighlightedText.swift](mdc:Warden/UI/Components/HighlightedText.swift):

```swift
struct HighlightedText: View {
    let text: String
    let highlight: String
    let color: Color
    
    // Automatically highlights search terms in text
}
```

Usage for search functionality:
```swift
HighlightedText("Chat about SwiftUI", highlight: "Swift", color: .yellow)
```

### Markdown Rendering
Implemented in [MarkdownView.swift](mdc:Warden/UI/Components/MarkdownView.swift):

```swift
struct MarkdownView: View {
    let markdownText: String
    let effectiveFontSize: Double
    let own: Bool
    let colorScheme: ColorScheme
}
```

Provides rich text rendering with:
- Code syntax highlighting
- Link detection and styling
- Adaptive color schemes for light/dark mode
- Message bubble context-aware styling

## Data and Type Extensions

### Data Cryptography
SHA256 hashing for data integrity:
```swift
extension Data {
    public func sha256() -> String
}

extension String {
    public func sha256() -> String
}
```

### Numeric Conversions
Type-safe numeric conversions:
```swift
extension Double {
    func toInt16() -> Int16?
}

extension Int16 {
    var toDouble: Double
}

extension Float {
    func roundedToOneDecimal() -> Float
}
```

## Core Data Extensions

### Context Save with Retry
Robust Core Data operations in [Extensions.swift](mdc:Warden/Utilities/Extensions.swift):
```swift
extension NSManagedObjectContext {
    func saveWithRetry(attempts: Int) {
        // Implements exponential backoff for failed saves
    }
}
```

Usage in [ChatStore.swift](mdc:Warden/Store/ChatStore.swift):
```swift
backgroundContext.saveWithRetry(attempts: 3)
```

## UI Component Patterns

### Reusable Button Styles
Consistent button styling throughout the app:

```swift
// In preferences tabs and components
Button("Action") {
    // Action
}
.buttonStyle(.plain)
.padding(.horizontal, 12)
.padding(.vertical, 6)
.background(RoundedRectangle(cornerRadius: 6).fill(Color.accentColor))
```

### Card Background Pattern
Consistent card styling for grouped content:
```swift
VStack {
    // Content
}
.padding(16)
.background(
    RoundedRectangle(cornerRadius: 8)
        .fill(cardBackgroundColor)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color.primary.opacity(0.08), lineWidth: 0.5)
        )
)
```

### Responsive Layout Patterns
Adaptive layouts for different window sizes:
```swift
Group {
    if horizontalSizeClass == .compact {
        VStack { content }
    } else {
        HStack { content }
    }
}
.frame(maxWidth: .infinity, maxHeight: .infinity)
```

## Animation Patterns

### Smooth Transitions
Consistent animation timing throughout the app:
```swift
withAnimation(.easeInOut(duration: 0.25)) {
    // State changes
}
```

### Scale and Opacity Effects
For button interactions and state changes:
```swift
.scaleEffect(isSelected ? 1.02 : 1.0)
.opacity(isEnabled ? 1.0 : 0.6)
.animation(.easeInOut(duration: 0.25), value: isSelected)
```

## Theme and Appearance

### Color Scheme Adaptation
Automatic light/dark mode support:
```swift
private var textColor: Color {
    colorScheme == .dark ? .white : .primary
}

private var backgroundColor: Color {
    Color(NSColor.windowBackgroundColor)
}
```

### Dynamic Type Support
Font scaling for accessibility:
```swift
Text("Content")
    .font(.system(size: effectiveFontSize, weight: .regular))
    .lineLimit(nil)
```

## Performance Considerations

### Lazy Loading
Efficient rendering for large lists:
```swift
LazyVStack {
    ForEach(items) { item in
        ItemView(item: item)
    }
}
```

### Memory Management
Proper cleanup in view lifecycle:
```swift
.onAppear {
    setupObservers()
}
.onDisappear {
    cleanupObservers()
}
```

## Best Practices

### Extension Organization
- Group related extensions in logical files
- Use clear, descriptive naming for custom modifiers
- Document complex extension behavior with examples
- Maintain consistency with Apple's naming conventions

### Performance
- Use extensions for functionality, not data storage
- Implement lazy evaluation where appropriate
- Avoid expensive operations in extension getters
- Cache computed values when necessary

### Accessibility
- Ensure all custom components support VoiceOver
- Provide appropriate accessibility labels and hints
- Test with Dynamic Type and reduced motion settings
- Use semantic colors that adapt to accessibility preferences
