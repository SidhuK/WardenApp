---
description: 
globs: 
alwaysApply: true
---
# API Architecture and Handler Patterns

Warden implements a modular API architecture that supports multiple AI providers through a unified interface. This guide covers the API handler patterns and integration strategies.

## Architecture Overview

### Core API Framework
- **Protocol Definition**: [APIProtocol.swift](mdc:Warden/Utilities/APIHandlers/APIProtocol.swift) - Unified interface for all AI providers
- **Service Factory**: [APIServiceFactory.swift](mdc:Warden/Utilities/APIHandlers/APIServiceFactory.swift) - Creates appropriate handler instances
- **Service Configuration**: [APIServiceConfig.swift](mdc:Warden/Utilities/APIHandlers/APIServiceConfig.swift) - Common configuration structure
- **Service Manager**: [APIServiceManager.swift](mdc:Warden/Utilities/APIServiceManager.swift) - High-level API coordination

### Handler Implementations
- **ChatGPT**: [ChatGPTHandler.swift](mdc:Warden/Utilities/APIHandlers/ChatGPTHandler.swift) - OpenAI API integration
- **Claude**: [ClaudeHandler.swift](mdc:Warden/Utilities/APIHandlers/ClaudeHandler.swift) - Anthropic API integration
- **Gemini**: [GeminiHandler.swift](mdc:Warden/Utilities/APIHandlers/GeminiHandler.swift) - Google AI integration
- **Ollama**: [OllamaHandler.swift](mdc:Warden/Utilities/APIHandlers/OllamaHandler.swift) - Local LLM integration
- **OpenRouter**: [OpenRouterHandler.swift](mdc:Warden/Utilities/APIHandlers/OpenRouterHandler.swift) - Multi-model proxy service
- **Perplexity**: [PerplexityHandler.swift](mdc:Warden/Utilities/APIHandlers/PerplexityHandler.swift) - Search-augmented AI
- **Deepseek**: [DeepseekHandler.swift](mdc:Warden/Utilities/APIHandlers/DeepseekHandler.swift) - Deepseek API integration with reasoning support
- **Groq**: Inherits from ChatGPTHandler for high-speed inference
- **Mistral**: [MistralHandler.swift](mdc:Warden/Utilities/APIHandlers/MistralHandler.swift) - Mistral AI integration

## Implementation Patterns

### Protocol Conformance
All handlers implement the `APIProtocol` which defines:
- `sendMessage()` - Primary communication method
- Streaming response handling
- Error management
- Authentication handling

### Reasoning Model Support
Special handling patterns for reasoning-capable models:
- **System Message Conversion**: Convert system role to user message for reasoning models
- **Reasoning Content Parsing**: Extract and format thinking process content
- **Dual Stream Handling**: Separate reasoning and content streams in real-time
- **UI Integration**: Connect to [ThinkingProcessView.swift](mdc:Warden/UI/Chat/ThinkingProcessView.swift) for display

### Request/Response Flow
1. **Message Preparation**: [MessageManager.swift](mdc:Warden/Utilities/MessageManager.swift) formats messages
2. **Reasoning Check**: Detect reasoning models and adjust message format
3. **API Call**: Handler-specific implementation sends request
4. **Streaming**: Real-time response processing with reasoning support
5. **Parsing**: [MessageParser.swift](mdc:Warden/Utilities/MessageParser.swift) processes AI responses
6. **Storage**: [ChatStore.swift](mdc:Warden/Store/ChatStore.swift) persists conversation data

### Configuration Management
- **App Constants**: [AppConstants.swift](mdc:Warden/Configuration/AppConstants.swift) - Service definitions and defaults
- **Reasoning Model List**: Centralized list of reasoning-capable models
- **User Preferences**: API keys and model preferences stored securely
- **Dynamic Configuration**: Runtime service discovery and configuration

## Service-Specific Features

### Streaming Support
- **Real-time Updates**: Progressive message building
- **Reasoning Streams**: Separate handling for thinking process content
- **Cancellation**: User can stop generation mid-stream
- **Error Recovery**: Graceful handling of stream interruptions

### Multimodal Support
- **Image Uploads**: [ImageAttachment.swift](mdc:Warden/Models/ImageAttachment.swift) handles image processing
- **Vision Models**: Automatic detection of vision-capable models
- **Content Formatting**: Proper multipart request construction

### Local Integration (Ollama)
- **Service Discovery**: Automatic detection of local Ollama instance
- **Model Management**: Download and manage local models
- **Performance Optimization**: Apple Silicon specific optimizations

### Reasoning Integration
- **Model Detection**: Check [AppConstants.openAiReasoningModels](mdc:Warden/Configuration/AppConstants.swift) for reasoning capability
- **Content Processing**: Handle `<think>` tags and reasoning content
- **UI Coordination**: Automatic integration with thinking process display

## Error Handling Strategy
- **Network Errors**: Retry logic and user feedback
- **API Errors**: Service-specific error interpretation
- **Rate Limiting**: Respect provider limits and quotas
- **Graceful Degradation**: Fallback options for service failures
- **Reasoning Errors**: Handle incomplete reasoning streams gracefully

## Testing and Development
- **Mock Handlers**: Test implementations for development
- **API Key Validation**: Secure testing without exposing credentials
- **Response Simulation**: Predictable responses for UI testing
- **Reasoning Testing**: Mock reasoning content for UI development

## Best Practices
- **Handler Independence**: Each handler is self-contained
- **Configuration Consistency**: Unified configuration across all services
- **Resource Management**: Proper cleanup of network resources
- **Security**: Never log or expose API keys in any handler
- **Performance**: Efficient request/response processing
- **Reasoning Support**: Always check for reasoning capability before special processing
- **Stream Management**: Proper handling of dual content streams for reasoning models
