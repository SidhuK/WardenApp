---
description: 
globs: 
alwaysApply: true
---
# Utilities and Common Patterns

Warden includes various utility classes and common patterns that provide reusable functionality across the application.

## Core Utilities (`Warden/Utilities/`)

### Message Processing
- **Message Manager**: [MessageManager.swift](mdc:Warden/Utilities/MessageManager.swift) - Formats messages for API calls
- **Message Parser**: [MessageParser.swift](mdc:Warden/Utilities/MessageParser.swift) - Processes AI responses and handles content formatting
- **Token Manager**: [TokenManager.swift](mdc:Warden/Utilities/TokenManager.swift) - Token counting and context management

### Service Management
- **API Service Manager**: [APIServiceManager.swift](mdc:Warden/Utilities/APIServiceManager.swift) - High-level coordination of API services
- **Chat Service**: [ChatService.swift](mdc:Warden/Utilities/ChatService.swift) - Chat-specific business logic

### Data Management
- **Database Patcher**: [DatabasePatcher.swift](mdc:Warden/Utilities/DatabasePatcher.swift) - Handles Core Data migrations and schema updates
- **Request Messages Transformer**: [RequestMessagesTransformer.swift](mdc:Warden/Models/RequestMessagesTransformer.swift) - Core Data value transformer for API requests

### UI Utilities
- **Extensions**: [Extensions.swift](mdc:Warden/Utilities/Extensions.swift) - Swift and SwiftUI extensions for common functionality
- **Swipe Modifier**: [SwipeModifier.swift](mdc:Warden/Utilities/SwipeModifier.swift) - Custom SwiftUI gesture handling

## Common Patterns

### Error Handling
- **Graceful Degradation**: All API calls include fallback behavior
- **User-Friendly Messages**: Technical errors are translated to user-readable messages
- **Logging Strategy**: Important events logged without exposing sensitive data
- **Recovery Mechanisms**: Automatic retry logic where appropriate

### Async Patterns
- **Structured Concurrency**: Uses async/await throughout the codebase
- **Actor Isolation**: Thread-safe operations using actors where needed
- **Task Management**: Proper cancellation and cleanup of async operations
- **Background Processing**: Heavy operations moved off the main thread

### State Management Patterns
- **Single Source of Truth**: [ChatStore.swift](mdc:Warden/Store/ChatStore.swift) manages all chat-related state
- **Environment Objects**: Shared state passed down the view hierarchy
- **Observable Objects**: View models that publish changes to the UI
- **User Defaults**: Settings stored with `@AppStorage` property wrapper

### API Integration Patterns
- **Protocol-Oriented Design**: All API handlers conform to [APIProtocol.swift](mdc:Warden/Utilities/APIHandlers/APIProtocol.swift)
- **Factory Pattern**: [APIServiceFactory.swift](mdc:Warden/Utilities/APIHandlers/APIServiceFactory.swift) creates appropriate handlers
- **Configuration Objects**: Consistent configuration structure across all services
- **Streaming Support**: Real-time response handling with cancellation support

### Data Persistence Patterns
- **Core Data Stack**: Centralized persistence controller in [WardenApp.swift](mdc:Warden/WardenApp.swift)
- **Background Contexts**: Heavy database operations on background queues
- **Batch Operations**: Efficient bulk updates and deletions
- **Relationship Management**: Proper cascade rules and data integrity

### Security Patterns
- **API Key Protection**: Secure storage without logging or exposure
- **Input Validation**: All user inputs validated before processing
- **Sandboxing**: Proper entitlements for macOS App Store compliance
- **Privacy by Design**: Local storage only, no telemetry or tracking

### Testing Patterns
- **Mock Objects**: Test doubles for external dependencies
- **Preview Data**: [PreviewStateManager.swift](mdc:Warden/UI/PreviewStateManager.swift) provides realistic test data
- **Dependency Injection**: Testable architecture with injectable dependencies
- **Unit Testing**: [WardenTests](mdc:WardenTests) directory contains unit tests
- **UI Testing**: [WardenUITests](mdc:WardenUITests) directory contains UI automation tests

### Performance Patterns
- **Lazy Evaluation**: Computed properties and lazy initialization where appropriate
- **Caching Strategy**: Intelligent caching of API responses and computed values
- **Memory Management**: Proper cleanup of resources and observers
- **Background Processing**: CPU-intensive operations moved to background queues

### Accessibility Patterns
- **VoiceOver Support**: Proper accessibility labels and hints
- **Keyboard Navigation**: Full keyboard accessibility throughout the app
- **Dynamic Type**: Support for user-preferred text sizes
- **Reduced Motion**: Respect user's motion preferences

## Development Guidelines
- **Code Organization**: Group related functionality in focused files
- **Naming Conventions**: Descriptive names that clearly indicate purpose
- **Documentation**: Inline documentation for complex algorithms
- **Error Messages**: Always provide context and potential solutions
- **Resource Cleanup**: Proper disposal of timers, observers, and network connections
