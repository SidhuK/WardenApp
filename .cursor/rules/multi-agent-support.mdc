---
description: 
globs: 
alwaysApply: false
---
# Multi-Agent Support Guide

This guide covers the implementation and usage of Warden's multi-agent functionality, which allows users to query multiple AI services simultaneously and compare their responses in real-time.

## Core Components

### Multi-Agent Message Manager
[MultiAgentMessageManager.swift](mdc:Warden/Utilities/MultiAgentMessageManager.swift) is the central orchestrator for multi-agent operations:

```swift
class MultiAgentMessageManager: ObservableObject {
    @Published var activeAgents: [AgentResponse] = []
    @Published var isProcessing = false
    private var activeTasks: [Task<Void, Never>] = []
    
    struct AgentResponse: Identifiable {
        let id = UUID()
        let serviceName: String
        let serviceType: String
        let model: String
        var response: String = ""
        var isComplete: Bool = false
        var error: APIError?
        var timestamp: Date = Date()
        
        var displayName: String {
            return "\(serviceName) (\(model))"
        }
    }
}
```

### UI Integration Components
Multi-agent functionality is integrated across multiple UI components:

- **Chat View**: [ChatView.swift](mdc:Warden/UI/Chat/ChatView.swift) - Main interface with mode toggling
- **Multi-Agent Response View**: [MultiAgentResponseView.swift](mdc:Warden/UI/Chat/MultiAgentResponseView.swift) - Response display
- **Service Selector**: [MultiAgentServiceSelector.swift](mdc:Warden/UI/Chat/MultiAgentServiceSelector.swift) - Service selection interface

## Implementation Patterns

### Concurrent Service Requests
Send requests to multiple AI services simultaneously using structured concurrency:

```swift
func sendMessageToMultipleServices(
    _ message: String,
    chat: ChatEntity,
    selectedServices: [APIServiceEntity],
    contextSize: Int,
    completion: @escaping (Result<[AgentResponse], Error>) -> Void
) {
    guard !selectedServices.isEmpty else {
        completion(.failure(APIError.noApiService("No services selected")))
        return
    }
    
    // Limit to maximum 3 services for optimal UX
    let limitedServices = Array(selectedServices.prefix(3))
    
    isProcessing = true
    activeAgents = []
    activeTasks.removeAll()
    
    let requestMessages = constructRequestMessages(chat: chat, forUserMessage: message, contextSize: contextSize)
    let temperature = (chat.persona?.temperature ?? AppConstants.defaultTemperatureForChat).roundedToOneDecimal()
    
    let dispatchGroup = DispatchGroup()
    
    // Create initial agent responses
    for service in limitedServices {
        let agentResponse = AgentResponse(
            serviceName: service.name ?? "Unknown",
            serviceType: service.type ?? "unknown",
            model: service.model ?? "unknown"
        )
        activeAgents.append(agentResponse)
    }
    
    // Send requests concurrently
    for (index, service) in limitedServices.enumerated() {
        dispatchGroup.enter()
        
        let task = Task {
            await sendStreamRequest(
                apiService: APIService(serviceEntity: service),
                requestMessages: requestMessages,
                temperature: temperature,
                agentIndex: index,
                dispatchGroup: dispatchGroup
            )
        }
        activeTasks.append(task)
    }
    
    dispatchGroup.notify(queue: .main) {
        self.isProcessing = false
        completion(.success(self.activeAgents))
    }
}
```

### Streaming Response Handling
Handle real-time streaming responses from multiple services with proper cancellation support:

```swift
private func sendStreamRequest(
    apiService: APIService,
    requestMessages: [[String: String]],
    temperature: Float,
    agentIndex: Int,
    dispatchGroup: DispatchGroup
) {
    let task = Task {
        do {
            let stream = try await apiService.sendMessageStream(requestMessages, temperature: temperature)
            var accumulatedResponse = ""
            
            for try await chunk in stream {
                // Check for cancellation
                try Task.checkCancellation()
                
                accumulatedResponse += chunk
                
                await MainActor.run {
                    if agentIndex < self.activeAgents.count {
                        self.activeAgents[agentIndex].response = accumulatedResponse
                        self.activeAgents[agentIndex].timestamp = Date()
                    }
                }
            }
            
            // Only complete if not cancelled
            if !Task.isCancelled {
                await MainActor.run {
                    if agentIndex < self.activeAgents.count {
                        self.activeAgents[agentIndex].response = accumulatedResponse
                        self.activeAgents[agentIndex].isComplete = true
                        self.activeAgents[agentIndex].timestamp = Date()
                    }
                }
            }
            
            dispatchGroup.leave()
        } catch is CancellationError {
            await MainActor.run {
                if agentIndex < self.activeAgents.count {
                    self.activeAgents[agentIndex].error = APIError.unknown("Request cancelled")
                    self.activeAgents[agentIndex].isComplete = true
                }
            }
            dispatchGroup.leave()
        } catch {
            await MainActor.run {
                if agentIndex < self.activeAgents.count {
                    self.activeAgents[agentIndex].error = APIError.unknown(error.localizedDescription)
                    self.activeAgents[agentIndex].isComplete = true
                }
            }
            dispatchGroup.leave()
        }
    }
    
    activeTasks.append(task)
}
```

### Cancellation Support
Proper cancellation of all active tasks:

```swift
func stopStreaming() {
    // Cancel all active tasks
    activeTasks.forEach { $0.cancel() }
    activeTasks.removeAll()
    
    // Update state
    isProcessing = false
    
    // Mark incomplete agents as cancelled
    for index in activeAgents.indices {
        if !activeAgents[index].isComplete {
            activeAgents[index].isComplete = true
            activeAgents[index].error = APIError.unknown("Request cancelled by user")
        }
    }
}
```

## User Interface Components

### Chat View Integration
Multi-agent mode is integrated into the main chat interface:

```swift
// Mode toggle button in chat toolbar
Button(action: {
    isMultiAgentMode.toggle()
    
    // Clear multi-agent responses when switching modes
    if !isMultiAgentMode {
        multiAgentManager.activeAgents.removeAll()
    }
    
    if isMultiAgentMode && selectedMultiAgentServices.isEmpty {
        // Auto-select up to 3 available services with valid API keys
        selectedMultiAgentServices = Set(apiServices.filter { service in
            guard let serviceId = service.id?.uuidString else { return false }
            do {
                let token = try TokenManager.getToken(for: serviceId)
                return token != nil && !token!.isEmpty
            } catch {
                return false
            }
        }.prefix(3)) // Limit to 3 services
    }
}) {
    HStack(spacing: 4) {
        Image(systemName: isMultiAgentMode ? "person.3.fill" : "person.3")
        Text("Multi-Agent")
    }
}
.disabled(!enableMultiAgentMode)
```

### Service Selection Interface
Service selection sheet for choosing which AI services to query:

```swift
.sheet(isPresented: $showServiceSelector) {
    MultiAgentServiceSelector(
        selectedServices: $selectedMultiAgentServices,
        isVisible: $showServiceSelector,
        availableServices: Array(apiServices)
    )
    .frame(width: 400, height: 500)
}
```

### Response Display
Show responses from multiple agents in organized column layout:

```swift
// Multi-agent responses (only show in multi-agent mode and when feature is enabled)
if enableMultiAgentMode && isMultiAgentMode && (!multiAgentManager.activeAgents.isEmpty || multiAgentManager.isProcessing) {
    MultiAgentResponseView(
        responses: multiAgentManager.activeAgents,
        isProcessing: multiAgentManager.isProcessing
    )
    .id("multi-agent-responses")
}
```

### Multi-Agent Response View
[MultiAgentResponseView.swift](mdc:Warden/UI/Chat/MultiAgentResponseView.swift) displays responses in a structured format:

```swift
struct MultiAgentResponseView: View {
    let responses: [MultiAgentMessageManager.AgentResponse]
    let isProcessing: Bool
    @AppStorage("chatFontSize") private var chatFontSize: Double = 14.0
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            if isProcessing && responses.isEmpty {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text("Sending to multiple AI services...")
                        .font(.system(size: chatFontSize))
                        .foregroundColor(.secondary)
                }
            } else {
                // Column layout for responses
                HStack(alignment: .top, spacing: 12) {
                    ForEach(responses) { response in
                        AgentResponseColumn(response: response)
                            .frame(maxWidth: .infinity)
                    }
                }
            }
        }
        .background(Color(NSColor.controlBackgroundColor))
        .cornerRadius(12)
        .padding(.horizontal, 16)
    }
}
```

### Individual Agent Response Column
Each agent response is displayed in its own column with service branding:

```swift
struct AgentResponseColumn: View {
    let response: MultiAgentMessageManager.AgentResponse
    @AppStorage("chatFontSize") private var chatFontSize: Double = 14.0
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            // Service header with icon and model name
            HStack(spacing: 6) {
                if let logoName = getLogoName(for: response.serviceType) {
                    Image(logoName)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 16, height: 16)
                }
                
                VStack(alignment: .leading, spacing: 0) {
                    Text(response.serviceName)
                        .font(.system(size: chatFontSize - 1, weight: .medium))
                        .foregroundColor(.primary)
                    
                    Text(response.model)
                        .font(.system(size: chatFontSize - 3))
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                // Status indicator
                if response.isComplete {
                    if response.error != nil {
                        Image(systemName: "exclamationmark.triangle.fill")
                            .foregroundColor(.red)
                            .font(.caption)
                    } else {
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.green)
                            .font(.caption)
                    }
                } else {
                    ProgressView()
                        .scaleEffect(0.6)
                }
            }
            
            Divider()
            
            // Response content
            if let error = response.error {
                Text("Error: \(error.localizedDescription)")
                    .font(.system(size: chatFontSize))
                    .foregroundColor(.red)
                    .italic()
            } else if response.response.isEmpty && !response.isComplete {
                Text("Waiting for response...")
                    .font(.system(size: chatFontSize))
                    .foregroundColor(.secondary)
                    .italic()
            } else {
                Text(response.response)
                    .font(.system(size: chatFontSize))
                    .foregroundColor(.primary)
                    .textSelection(.enabled)
            }
            
            Spacer()
        }
        .padding(12)
        .background(Color(NSColor.windowBackgroundColor))
        .cornerRadius(8)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color.secondary.opacity(0.2), lineWidth: 1)
        )
    }
}
```

## Service Limitations and Constraints

### Maximum Service Limit
Limit concurrent requests to maintain optimal performance and user experience:

```swift
// Limit to maximum 3 services for optimal UX
let limitedServices = Array(selectedServices.prefix(3))

if limitedServices.count != selectedMultiAgentServices.count {
    // Update the selection to reflect the limit
    selectedMultiAgentServices = Set(limitedServices)
}
```

### Resource Management
- **Memory Usage**: Monitor memory consumption with multiple active streams
- **Network Resources**: Manage concurrent network connections efficiently
- **UI Performance**: Ensure responsive interface during multiple operations
- **Task Cancellation**: Proper cleanup when switching modes or stopping requests

## Configuration Management

### Feature Flag
Multi-agent functionality can be enabled/disabled via user preferences:

```swift
@AppStorage("enableMultiAgentMode") private var enableMultiAgentMode: Bool = false

.onChange(of: enableMultiAgentMode) { oldValue, newValue in
    if !newValue && isMultiAgentMode {
        isMultiAgentMode = false
        multiAgentManager.activeAgents.removeAll()
    }
}
```

### Service Availability Check
Verify API keys are available for selected services:

```swift
private func hasValidAPIKey(for service: APIServiceEntity) -> Bool {
    guard let serviceId = service.id?.uuidString else { return false }
    do {
        let token = try TokenManager.getToken(for: serviceId)
        return token != nil && !token!.isEmpty
    } catch {
        return false
    }
}
```

### Auto-Selection Logic
Automatically select available services when entering multi-agent mode:

```swift
if isMultiAgentMode && selectedMultiAgentServices.isEmpty {
    selectedMultiAgentServices = Set(apiServices.filter { service in
        hasValidAPIKey(for: service)
    }.prefix(3)) // Limit to 3 services
}
```

## Error Handling and Recovery

### Individual Service Errors
Each agent can fail independently without affecting others:

```swift
struct AgentResponse {
    var error: APIError?
    var isComplete: Bool = false
    
    // Error states are handled per-agent
}
```

### Timeout Handling
Individual service timeouts don't cancel other concurrent requests:

```swift
// Each task handles its own timeout and error states
Task {
    do {
        let stream = try await apiService.sendMessageStream(requestMessages, temperature: temperature)
        // Process stream...
    } catch {
        // Handle individual service error
        await MainActor.run {
            self.activeAgents[agentIndex].error = APIError.unknown(error.localizedDescription)
            self.activeAgents[agentIndex].isComplete = true
        }
    }
}
```

### Network Error Recovery
- Display clear error messages per service
- Allow retry for failed services
- Continue processing successful responses
- Provide fallback to single-agent mode

## Performance Optimization

### Efficient State Updates
Minimize UI updates during streaming:

```swift
// Batch updates and use main actor for UI changes
await MainActor.run {
    if agentIndex < self.activeAgents.count {
        self.activeAgents[agentIndex].response = accumulatedResponse
        self.activeAgents[agentIndex].timestamp = Date()
    }
}
```

### Memory Management
- Clean up completed tasks promptly
- Limit response content length for display
- Use lazy loading for large responses
- Implement proper resource cleanup

### Concurrent Request Optimization
- Use DispatchGroup for coordinating multiple async operations
- Implement proper cancellation handling
- Balance request concurrency with system resources
- Monitor and limit memory usage during concurrent operations

## Testing and Debugging

### Mock Multi-Agent Responses
Use preview data for UI development and testing:

```swift
static var mockAgentResponses: [MultiAgentMessageManager.AgentResponse] = [
    MultiAgentMessageManager.AgentResponse(
        serviceName: "OpenAI",
        serviceType: "openai",
        model: "gpt-4",
        response: "This is a mock response from OpenAI's GPT-4 model...",
        isComplete: true
    ),
    // Additional mock responses...
]
```

### Error Simulation
Test error handling with simulated failures:

```swift
// Simulate network timeout
let errorResponse = AgentResponse(
    serviceName: "Test Service",
    serviceType: "test",
    model: "test-model",
    error: APIError.networkTimeout
)
```

### Performance Testing
- Test with maximum number of concurrent services
- Verify proper cancellation behavior
- Monitor memory usage during long-running operations
- Test UI responsiveness with multiple streaming responses

## Best Practices

### Implementation Guidelines
- Always limit concurrent services to prevent resource exhaustion
- Implement proper cancellation for all async operations
- Use structured concurrency patterns (async/await, Task)
- Handle individual service failures gracefully

### UI/UX Considerations
- Provide clear visual feedback for each service's status
- Show loading states and progress indicators
- Make service selection intuitive and discoverable
- Allow easy cancellation of multi-agent requests

### Resource Management
- Monitor memory usage with multiple concurrent streams
- Implement proper cleanup for cancelled operations
- Use background queues for non-UI operations
- Limit response content size for display performance

### Error Handling
- Display service-specific error messages
- Allow retry for individual failed services
- Provide fallback to single-agent mode
- Log errors appropriately without exposing sensitive data
