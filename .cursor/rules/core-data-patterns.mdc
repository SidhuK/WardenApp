---
description: 
globs: 
alwaysApply: true
---
# Core Data Patterns and Data Persistence

Warden uses Core Data for local data persistence with a focus on privacy and performance. All data is stored locally with no external telemetry.

## Core Data Setup
- **Persistence Controller**:  contains `PersistenceController` singleton
- **Data Model**: [warenDataModel.xcdatamodeld](mdc:Warden/Store/warenDataModel.xcdatamodeld) defines the schema
- **Store Manager**: [ChatStore.swift](mdc:Warden/Store/ChatStore.swift) provides high-level data operations

## Entity Relationships
- **Chat**: Primary entity containing conversation metadata
- **Message**: Individual messages within chats
- **APIService**: AI service configurations and API keys
- **Persona**: AI persona definitions with system instructions
- **Attachment**: File and image attachments

## Data Access Patterns

### ChatStore as Single Source of Truth
- **Centralized Access**: All Core Data operations go through [ChatStore.swift](mdc:Warden/Store/ChatStore.swift)
- **ObservableObject**: Publishes changes to SwiftUI views
- **Background Context**: Heavy operations performed on background queues
- **Error Handling**: Graceful error recovery and user notification

### Fetch Requests
- **Predicates**: Use NSPredicate for efficient filtering
- **Sort Descriptors**: Consistent sorting across the app
- **Batch Limits**: Pagination for large datasets
- **Relationships**: Proper use of Core Data relationships

## Data Transformers
- **Custom Transformers**: [RequestMessagesTransformer.swift](mdc:Warden/Models/RequestMessagesTransformer.swift) for complex data types
- **JSON Encoding**: Secure serialization of API request data
- **Value Transformers**: Registered in  initialization

## Migration and Versioning
- **Database Patches**: Applied during app initialization
- **Configuration Migration**: Existing user data preserved during updates
- **Schema Evolution**: Careful planning for Core Data model changes

## Privacy and Security
- **Local Storage Only**: No cloud synchronization or external storage
- **API Key Protection**: Secure storage of sensitive authentication data
- **Data Export**: JSON backup/restore functionality for user control
- **No Telemetry**: Zero data collection or usage tracking

## Performance Optimization
- **Lazy Loading**: Fetch data only when needed
- **Batch Operations**: Efficient bulk updates and deletions
- **Memory Management**: Proper context lifecycle management
- **Background Processing**: Heavy operations off the main thread

## Best Practices
- **Context Isolation**: Separate contexts for UI and background operations
- **Save Frequency**: Strategic save points to balance performance and data safety
- **Relationship Management**: Proper cascade delete rules
- **Testing**: Mock Core Data stack for unit tests
- **Error Recovery**: Graceful handling of Core Data errors
